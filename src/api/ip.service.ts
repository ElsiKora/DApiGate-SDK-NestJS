/**
 * DApiGate
 * DApiGate `Reaper API` documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpService } from "@nestjs/axios";
import { Injectable, Optional } from "@nestjs/common";
import { lastValueFrom } from "rxjs";

import { Configuration } from "../configuration";

import type { IpGetResponseDTO } from "../model/ip-get-response-dto.model";

@Injectable()
export class IpService {
	protected basePath = "https://reaper.dapigate.com";

	public configuration = new Configuration();

	public defaultHeaders: Record<string, string> = {};

	constructor(
		protected httpClient: HttpService,
		@Optional() configuration: Configuration,
	) {
		this.configuration = configuration || this.configuration;
		this.basePath = configuration?.basePath || this.basePath;
	}

	/**
	 * @param consumes string[] mime-types
	 * @return true: consumes contains 'multipart/form-data', false: otherwise
	 */
	private canConsumeForm(consumes: Array<string>): boolean {
		const form = "multipart/form-data";

		return consumes.includes(form);
	}

	/**
	 * Retrieves information about an IP address.
	 *
	 * @param {string} ip - The IP address to retrieve information about.
	 * @return {Promise<IpGetResponseDTO>} - A Promise that resolves with the response containing information about the IP address.
	 */
	public get(ip: string): Promise<IpGetResponseDTO>;
	/**
	 * Retrieve information about an IP address.
	 *
	 * @param {string} ip - The IP address to retrieve information for.
	 *
	 * @returns {Promise<any>} - The response data containing information about the IP address.
	 *
	 * @throws {Error} - If the required parameter 'ip' is null or undefined.
	 */
	public async get(ip: string): Promise<any> {
		if (ip === null || ip === undefined) {
			throw new Error("Required parameter ip was null or undefined when calling ipControllerGet.");
		}

		const queryParameters = new URLSearchParams();

		if (ip !== undefined && ip !== null) {
			queryParameters.append("ip", <any>ip);
		}

		const headers = { ...this.defaultHeaders };

		// to determine the Accept header
		const httpHeaderAccepts: Array<string> = ["application/json"];
		const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);

		if (httpHeaderAcceptSelected != undefined) {
			headers["Accept"] = httpHeaderAcceptSelected;
		}

		try {
			const observable = this.httpClient.get<IpGetResponseDTO>(`${this.basePath}/v1/ip`, {
				headers: headers,
				params: queryParameters,
				withCredentials: this.configuration.withCredentials,
			});

			const response = await lastValueFrom(observable);

			return response.data; // Assuming the response format is as expected.
		} catch (error) {
			// Implement error handling here
			// You could either rethrow the error or handle it based on your error handling strategy
			throw error;
		}
	}
}
