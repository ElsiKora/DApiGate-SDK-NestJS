/**
 * DApiGate
 * DApiGate `Reaper API` documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpService } from "@nestjs/axios";
import { Injectable, Optional } from "@nestjs/common";

import { Configuration } from "../configuration";

import type { RateGetSimpleListResponseDTO } from "../model/rate-get-simple-list-response-dto.model";
import type { AxiosResponse } from "axios";
import type { Observable } from "rxjs";

@Injectable()
export class RateService {
	protected basePath = "https://reaper.dapigate.com";

	public configuration = new Configuration();

	public defaultHeaders: Record<string, string> = {};

	constructor(
		protected httpClient: HttpService,
		@Optional() configuration: Configuration,
	) {
		this.configuration = configuration || this.configuration;
		this.basePath = configuration?.basePath || this.basePath;
	}

	/**
	 * @param consumes string[] mime-types
	 * @return true: consumes contains 'multipart/form-data', false: otherwise
	 */
	private canConsumeForm(consumes: Array<string>): boolean {
		const form = "multipart/form-data";

		return consumes.includes(form);
	}

	/**
	 * Fetching simple list of &#x60;Rates&#x60;
	 * This method is used for fetching simple list of &#x60;Rates&#x60;
	 * @param base Rate code
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public rateControllerGetSimpleList(base: string): Observable<AxiosResponse<RateGetSimpleListResponseDTO>>;
	public rateControllerGetSimpleList(base: string): Observable<any> {
		if (base === null || base === undefined) {
			throw new Error("Required parameter base was null or undefined when calling rateControllerGetSimpleList.");
		}

		const queryParameters = new URLSearchParams();

		if (base !== undefined && base !== null) {
			queryParameters.append("base", <any>base);
		}

		const headers = { ...this.defaultHeaders };

		// to determine the Accept header
		const httpHeaderAccepts: Array<string> = ["application/json"];
		const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);

		if (httpHeaderAcceptSelected != undefined) {
			headers["Accept"] = httpHeaderAcceptSelected;
		}

		// to determine the Content-Type header
		const consumes: Array<string> = [];

		return this.httpClient.get<RateGetSimpleListResponseDTO>(`${this.basePath}/v1/rate`, {
			headers: headers,
			params: queryParameters,
			withCredentials: this.configuration.withCredentials,
		});
	}
}
